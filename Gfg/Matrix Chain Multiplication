// Recursive code

// class Solution{
// public:
//     int solve(int arr[], int i, int j){
//         // Base condition
//         if(i >= j) return 0;
        
//         int mini = INT_MAX;
//         // K loop scheme
//         for(int k = i; k <= j-1; k++){
//             int temp_ans = solve(arr, i, k) + solve(arr, k+1, j) + arr[i-1] * arr[k] * arr[j];
//             mini = min(mini, temp_ans);
//         }
//         return mini;
//     }
    
//     int matrixMultiplication(int N, int arr[])
//     {
//         return solve(arr, 1, N-1);
//     }
// };


// Memoized code

class Solution{
public:
    int t[101][101];
    int solve(int arr[], int i, int j){
        // Base condition
        if(i >= j) return 0;
        
        if(t[i][j] != -1) return t[i][j];
        
        int mini = INT_MAX;
                
        // K loop scheme
        for(int k = i; k <= j-1; k++){
            int temp_ans = solve(arr, i, k) + solve(arr, k+1, j) + arr[i-1] * arr[k] * arr[j];
            mini = min(mini, temp_ans);
        }
        return t[i][j] = mini;
    }
    
    int matrixMultiplication(int N, int arr[])
    {
        memset(t, -1, sizeof(t));
        return solve(arr, 1, N-1);
    }
};
