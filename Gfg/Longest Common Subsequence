// *******************Recursive Code********************
// class Solution
// {
//     public:
//     int lcs(int m, int n, string s1, string s2)
//     {
//         // Base condition
//         if(m == 0 || n == 0) return 0;
        
           // Choice diagram implementation
//         if(s1[m-1] == s2[n-1]){
//             return 1 + lcs(m-1, n-1, s1, s2);
//         }
//         else{
//             return max(lcs(m, n-1, s1, s2) , lcs(m-1, n, s1, s2));
//         }
//     }
// };


// *******************Memoization Code********************
// class Solution
// {
//     public:
//     int solve(int m, int n, string &s1, string &s2, int t[][1001]){
//         // Base condition
//         if(m == 0 || n == 0) return 0;
        
//         if(t[m][n] != -1) return t[m][n];
        
//         // Choice diagram implementation
//         if(s1[m-1] == s2[n-1]){
//             return t[m][n] =  1 + solve(m-1, n-1, s1, s2, t);
//         }
//         else{
//             return t[m][n] = max(solve(m, n-1, s1, s2, t) , solve(m-1, n, s1, s2, t));
//         }
//     }
    
//     int lcs(int m, int n, string s1, string s2)
//     {
//         int t[1001][1001];
//         memset(t, -1, sizeof(t));
        
//         return solve(m, n, s1, s2, t);
//     }
// };

// *******************Top Down Code********************
class Solution
{
    public:
    int lcs(int m, int n, string s1, string s2)
    {
        int t[m+1][n+1];
        
        // Initialization
        for(int j=0; j<n+1; j++){
           t[0][j] = 0;   
        }
        for(int i=0; i<m+1; i++){
           t[i][0] = 0;     
        }
        
        // Choice diagram implementation
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(s1[i-1] == s2[j-1]){
                    t[i][j] = 1 + t[i-1][j-1];
                }
                else{
                    t[i][j] = max(t[i][j-1] , t[i-1][j]);
                }
            }
        }
        return t[m][n];
    }
};
