// we know, if S1 and S2 are the subset of arr,
// then S1 + S2 = Total Sum (sum of all elements in the array).
// and acc. to question, S1 - S2 = d (given difference).
// By solving both the equation, we get, 
// S1 = (d + Total Sum) / 2.
// Now count no. of subsets with a sum = (d + Total Sum) / 2.

class Solution {
  public:
    int countPartitions(int n, int d, vector<int>& arr){
        int mod = 1e9 + 7;
        
        int s = 0;
        for(int i=0; i<n; i++){
            s += arr[i] % mod;
        }
        
        // (d + s) should be even, because when we do (d + s)/2 in the next step, we got wrong answer.
        // Example, (d + s) is 9, after dividing by 2, it becomes 4.5
        // We will get correct answer only if we find subsets with sum 4.5
        // but this code will find subsets with sum 4.
        // As there is no possible subset whose sum could be 4.5, because all elements are of int datatype.
        // Therefore we return 0 for such cases.
        if((d + s) % 2) return 0;
        
        int sum = (d + s)/2;
        
        vector<vector<int>> t(n+1, vector<int>(sum+1));

        // Initialization
        for(int j=0; j<sum+1; j++){
            t[0][j] = 0;
        }
        for(int i=0; i<n+1; i++){
            t[i][0] = 1;
        }
        
        // Choice diagram implementation
        for(int i=1; i<n+1; i++){
            for(int j=0; j<sum+1; j++){
                if(arr[i-1] <= j){
                    t[i][j] = (t[i-1][j-arr[i-1]] % mod) + (t[i-1][j] % mod);
                }
                else t[i][j] = (t[i-1][j] % mod);
            }
        }
        return (t[n][sum] % mod);
    }
};
