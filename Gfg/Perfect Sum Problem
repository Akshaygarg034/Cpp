// Similar to 'Find a subset in a array with a given sum'.
// But, in this, we have to count the subsets with a given sum, for that we have to make sum changes.

// A Special case arises in this case; arr[i] can be 0.
// So there is other possible way of getting a sum 0 other than during initialization part.
// So in Choice diagram implementation, check all elements for sum 0 as well. i.e, start sum's for loop from 0.

class Solution{
	public:
	int perfectSum(int arr[], int n, int sum)
	{
	    int mod = 1e9 + 7;
        int t[n+1][sum+1];
        
        // Initialization
        for(int j=0; j<sum+1; j++){
            t[0][j] = 0;
        }
        for(int i=0; i<n+1; i++){
            t[i][0] = 1;
        }
        
        // Choice diagram implementation
        for(int i=1; i<n+1; i++){
            for(int j=0; j<sum+1; j++){
                if(arr[i-1] <= j){
                    // Doing + instead of ||, because we need to count the subsets
                    t[i][j] = t[i-1][j- arr[i-1]] % mod + t[i-1][j] % mod;
                }
                else t[i][j] = t[i-1][j] % mod;
            }
        }
        for(int i=0; i<n+1; i++){
            for(int j=0; j<sum+1; j++){
                cout<<t[i][j];
            }
            cout<<endl;
        }
        return t[n][sum] % mod;
	}
	  
};
