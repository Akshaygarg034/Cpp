// If we simply combine two strings, we get a common supersequence, but it is not shortest.
// Shortest supersequence is one, in which common substring is added only once, rather than twice.
// Simply find length of common subsequence and subtract it from (m + n) gives you answer.

class Solution
{
    public:
    //Function to find length of shortest common supersequence of two strings.
    int shortestCommonSupersequence(string X, string Y, int m, int n)
    {
        int t[m+1][n+1];
        
        // Initialization
        for(int i=0; i<m+1; i++){
            t[i][0] = 0;
        }
        for(int j=0; j<n+1; j++){
            t[0][j] = 0;
        }
        
        // Choice diagram implementation
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(X[i-1] == Y[j-1]){
                    t[i][j] = 1 + t[i-1][j-1];
                }
                else{
                    t[i][j] = max(t[i][j-1], t[i-1][j]);
                }
            }
        }
        
        int lcs = t[m][n];
        return m + n - lcs;
    }
};
