// For this, firstly we have to check if the total sum of all elements is even, only then it can be partitioned
// into two equal parts.
// Now after that check in the arr, that if there is any subset whose sum = (total sum of all elements / 2).

class Solution {
public:
    bool subsetSum(int n, vector<int> nums, int sum){
        bool t[n+1][sum+1];
        // Initialization
        for(int j=0; j<sum+1; j++){
            t[0][j] = 0;
        }
        for(int i=0; i<n+1; i++){
            t[i][0] = 1;
        }
        
        // Choice diagram implementation
        for(int i=1; i<n+1; i++){
            for(int j=1; j<sum+1; j++){
                if(nums[i-1] <= j){
                    t[i][j] = t[i-1][j-nums[i-1]] || t[i-1][j];
                }
                
                else t[i][j] = t[i-1][j];
            }
        }
        return t[n][sum];
    }

    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i=0; i < n; i++){
            sum += nums[i];
        }
        if(sum % 2 != 0) return 0;
        else{
            return subsetSum(n, nums, sum/2);
        }
    }
};
