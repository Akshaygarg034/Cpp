// Maintain a map to store all array values related to particular snap_id.
// For get function, if value of that snap_id is present, we need to return that value.
// Otherwise, we need to find value lower than that id, then return it.

class SnapshotArray {
public:
    map<int, map<int, int>> mp;
    int snap_id = 0;

    SnapshotArray(int length) {
        for(int i=0; i<length; i++){
            map<int, int> temp;
            temp[0] = 0;
            mp[i] = temp;
        }
    }
    
    void set(int index, int val) {
        mp[index][snap_id] = val;
    }
    
    int snap() {
        return snap_id++;
    }
    
    int get(int index, int snap_id) {
       auto it =  mp[index].upper_bound(snap_id);
       it--;
       return it->second;
    }
};

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray* obj = new SnapshotArray(length);
 * obj->set(index,val);
 * int param_2 = obj->snap();
 * int param_3 = obj->get(index,snap_id);
 */
