// Recursive Approach
// Gives TLE because time complexity is 8^(m*n).

// class Solution {
// public:
//     void solve(vector<vector<int>> grid, int m, int n, int i, int j, int count, int &ans, vector<vector<int>> &vis){
//         if(i >= m || j >= n || i < 0 || j < 0) return;
//         if(grid[i][j] == 1 || vis[i][j] == 1) return;
//         if(i == m-1 && j == n-1){
//             ans = min(count, ans);
//             return;
//         };
//         vis[i][j] = 1;

//         solve(grid, m, n, i, j-1, count+1, ans, vis);
//         solve(grid, m, n, i-1, j-1, count+1, ans, vis);
//         solve(grid, m, n, i+1, j-1, count+1, ans, vis);
//         solve(grid, m, n, i-1, j, count+1, ans, vis);
//         solve(grid, m, n, i+1, j, count+1, ans, vis);
//         solve(grid, m, n, i, j+1, count+1, ans, vis);
//         solve(grid, m, n, i+1, j+1, count+1, ans, vis);
//         solve(grid, m, n, i-1, j+1, count+1, ans, vis);

//         vis[i][j] = 0;
//     }

//     int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
//         int n = grid.size();
//         int m = n;
//         vector<vector<int>> vis(m, vector<int>(n, 0));
//         if(grid[0][0] == 1) return -1;

//         int ans = INT_MAX;
//         solve(grid, m, n, 0, 0, 1, ans, vis);
//         if(ans == INT_MAX) return -1;
//         return ans;
//     }
// };

// It is possible to do this by BFS
// Simply do bfs and modify the original grid and use it as visited array as well as use it to store the count of minimum path.

class Solution {
public:
    vector<pair<int, int>> neighbours = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {-1, -1}, {1, -1}, {-1, 1}};

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;

        queue<vector<int>> q;
        q.push({0,0});
        grid[0][0] = 1;

        while(!q.empty()){
           auto curr = q.front();
           int i = curr[0];
           int j = curr[1];
           q.pop();

           if(i == n-1 && j == n-1) return grid[i][j];

           for(auto [i1, j1]: neighbours){
               int x = i+i1; int y = j+j1;

               if(x < n && y < n && x >= 0 && y >= 0 && grid[x][y] == 0){
                   grid[x][y] = grid[i][j] + 1;
                   q.push({x, y});
               }          
            }
        }
        return -1;
    }
};
