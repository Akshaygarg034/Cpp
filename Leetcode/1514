// Using Dijkstra's Algorithm but for finding maximum ans instead of minimum.
// So we use max heap.
// And we update dist vector with maximum ans.

class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        //     1 -> {2, 0.5}
        vector<pair<int, double>>g[n];
        vector<int> vis(n, 0);

        vector<double> dist(n, 0.0);

        for(int i=0; i<edges.size(); i++){
            g[edges[i][0]].push_back({edges[i][1], succProb[i]});
            g[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }

        priority_queue<pair<double, int>> pq;
        pq.push({1, start});

        while(!pq.empty()){
            double prob = pq.top().first;
            int elem = pq.top().second;
            pq.pop();

            vis[elem] = 1;

            for(auto it : g[elem]){
                double prob1 = it.second;
                int elem1 = it.first;

                if(!vis[elem1]){
                    if(prob * prob1 > dist[elem1]){
                        dist[elem1] = prob * prob1;
                        pq.push({prob * prob1, elem1});
                    }
                }
            }
        }
        

        return dist[end];
    }
};
