// Method 1: Solve the question using given matrix representation of the graph

// class Solution {
// public:
//     void dfs(vector<vector<int>>& isConnected, int src, vector<bool> &vis){
//         vis[src] = 1;

//         vector<int> g;
//         for(int i = 0; i < isConnected.size(); i++){
//             if(isConnected[src][i]) g.push_back(i);
//         }

//         for(auto it: g){
//             if(!vis[it]) dfs(isConnected, it, vis);
//         }
//     }
//     int findCircleNum(vector<vector<int>>& isConnected) {
//         int n = isConnected.size();

//         // Using DFS Traversal method to find no. of provinces
//         int cnt =0;
//         vector<bool> vis(n, 0);
//         for(int i=0; i<n; i++){
//             if(!vis[i]){
//                 cnt++;
//                 dfs(isConnected, i, vis);
//             }          
//         }

//         return cnt;
//     }
// };

// Method 2: Solve the question using list representation of the graph.

class Solution {
public:
    void dfs(vector<int> g[], int i, vector<bool> &vis){
        vis[i] = 1;
        for(auto it: g[i]){
            if(!vis[it]) dfs(g, it, vis);
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> g[n];

        // Making Graph
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i != j){
                    if(isConnected[i][j]){
                        g[i].push_back(j);
                    }
                }
            }
        }

        int cnt =0;
        vector<bool> vis(n, 0);
        for(int i=0; i<n; i++){
            if(!vis[i]){
                cnt++;
                dfs(g, i, vis);
            }          
        }

        return cnt;
    }
};
