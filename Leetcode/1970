// For each cell value, do a bfs and check if it is possible to reach at last row.
// We have to return such last cell value.
// But linear search will be time consuming, So we do binary search for each cell value.
// On each mid value of binary search, firstly make all previous values of grid 1.
// After that do bfs and return true or false.

class Solution {
public:
    int dx[4] = {1, -1, 0, 0};
    int dy[4] = {0, 0, 1, -1};

    bool isPossible(vector<vector<int>>& cells, int row, int col, int mid){
        vector<vector<bool>> grid(row, vector<bool>(col, 0));
        for(int i=0; i<mid; i++) grid[cells[i][0] - 1][cells[i][1] - 1] = 1;

        queue<pair<int, int>> q;
        
        for(int i=0; i<col; i++){
            if(!grid[0][i]){
                q.push({0, i});
                grid[0][i] = 1;
            }
        }

        while(!q.empty()){
            auto [i, j] = q.front();
            q.pop();

            if(i == row-1) return true;

            for(int k=0; k<4; k++){
                int i1 = i + dx[k];
                int j1 = j + dy[k];

                if(i1 < 0 || j1 < 0 || i1 >= row || j1 >= col || grid[i1][j1] == 1) continue;
                grid[i1][j1] = 1;
                q.push({i1, j1});
            }
        }
        return false;
    }

    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        int l = 1;
        int h = cells.size();
        int ans = 0;

        while(l <= h){
            int mid = l + (h - l)/2;

            if(isPossible(cells, row, col, mid)){
                ans = mid;
                l = mid + 1;
            }

            else h = mid - 1;
        }

        return ans;
    }
};
