// As we are using previous values to get the results, so it is DP question.
// We use vector of maps  for this.
// for each i, we move j from i+1 to n, then we store each differences and length of subsequence in map[j].
// At particular j, if difference is already there in corresponding i, we store length + 1 in map[j] and update maxi.
// In last we will return maxi.
 
class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        int n = nums.size(); 
        vector<unordered_map<int, int>> dp(n);
        int maxi = 2;

        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                int diff = nums[j] - nums[i];

                if(dp[i].find(diff) != dp[i].end()){
                    dp[j][diff] = dp[i][diff] + 1;
                }

                else dp[j][diff] = 2;

                maxi = max(maxi, dp[j][diff]);
            }
        }

        return maxi;
    }
};
