// Recusrion choose or not choose method,
// Using set to remove duplicate ans
// But gives TLE

// class Solution {
// public:
//     void solve(int idx, vector<int>& arr, int target, vector<int> &temp, set<vector<int>> &s){
//         if(target == 0){
//             s.insert(temp);
//             return;
//         }

//         if(idx == arr.size()) return;

//         // Choose
//         if(arr[idx] <= target){
//             temp.push_back(arr[idx]);
//             solve(idx+1, arr, target-arr[idx], temp, s);
//             temp.pop_back();
//         }
        
//         // Not Choose
//         solve(idx+1, arr, target, temp, s);
//     }
//     vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
//         sort(candidates.begin(), candidates.end());

//         set<vector<int>> s;
//         vector<int> temp;

//         solve(0, candidates, target, temp, s);
//         vector<vector<int>> ans(s.begin(), s.end());
//         return ans;
//     }
// };


// Using Recursion, in which we firstly find all combinations starting with idx 0, then 1, then 2----

class Solution {
public:
    void solve(int idx, vector<int>& arr, int target, vector<int> &temp, vector<vector<int>> &ans){
        if(target == 0){
            ans.push_back(temp);
            return;
        }

        for(int i = idx; i < arr.size(); i++){
            if(i != idx && arr[i] == arr[i-1]) continue;

            // We do break because, we have converted array in increasing order
            if(arr[i] > target) break;

            temp.push_back(arr[i]);
            solve(i+1, arr, target-arr[i], temp, ans);
            temp.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());

        vector<vector<int>> ans;
        vector<int> temp;

        solve(0, candidates, target, temp, ans);
        return ans;
    }
};
