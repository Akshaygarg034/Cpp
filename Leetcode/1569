// For elements 3, (1, 2, 3), (4, 5)
// 3 will be fixed, for other 5 positions, we have to put left and right elements (also maintain their order).             3 _ _ _ _ _ 
// So no. of ways in which left elements can be put in two positions in array are (5 c 3)
// we dont have to calculate for right elements.
// But left subtree have two ways to reorder also.
// So our ans will be (5 c 3) * 2
// So in general our ans is (n-1 C left_elements) * left ans * right ans

class Solution {
public:
    vector<vector<long long>> table;
    long long mod = 1e9 + 7;

    int dfs(vector<int>& nums){
        int n = nums.size();
        // Base Condition
        if(n <= 2) return 1;

        vector<int> left, right;
        for(int i=1; i<n; i++){
            if(nums[i] < nums[0]) left.push_back(nums[i]);
            else right.push_back(nums[i]);
        }

        long long left_res = dfs(left) % mod;
        long long right_res = dfs(right) % mod;

        return (((table[n-1][left.size()] * left_res) % mod) * right_res) % mod;
    }

    long long numOfWays(vector<int>& nums) {
        int n = nums.size();

        // Making ncr table
        table = vector<vector<long long>> (n+1, vector<long long>(n+1, 1));
        for(int i=2; i<n+1; i++){
            for(int j=1; j<i; j++){
                table[i][j] = (table[i-1][j-1] + table[i-1][j]) % mod;
            }
        }

        long long ans = dfs(nums) % mod;
        return ans - 1;
    }
};
