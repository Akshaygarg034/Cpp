// This is sliding window question as for window of size p.size() in s, we are checking,
// if the window elements are anagram of p or not.

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int k = p.size();
        vector<int> ans;
        unordered_map<char, int> mp;

        for(int i=0; i < k; i++){
            mp[p[i]]++;
        }

        int count = mp.size();

        // Before window making
        for(int i=0; i< k-1; i++){
            if(mp.find(s[i]) != mp.end()){
                mp[s[i]]--;

                if(mp[s[i]] == 0) count--;
            }
        }

        // After window making
        for(int i = k-1; i< s.size(); i++){
            if(mp.find(s[i]) != mp.end()){
                mp[s[i]]--;

                if(mp[s[i]] == 0) count--;
            }

            // Storing answer in ans vector
            if(count == 0) ans.push_back(i - k + 1);

            // Removing information of starting element of the window
            if(mp.find(s[i - k + 1]) != mp.end()){
                mp[s[i - k + 1]]++;

                if(mp[s[i - k + 1]] == 1) count++;
            }

        }
        return ans;
    }
};
